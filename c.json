{
	"main_void": {
		"prefix": "main(void)",
		"body":[
			"main(void)",
			"{",
			"\t$0",
			"\treturn (0);",
			"}"
		]
	},

	"main_args":{
		"prefix": "main(args)",
		"body":[
			"main(int aa, char **args)",
			"{",
			"\t$0",
			"\treturn (0);",
			"}"
		]
	},

	"main_args_1": {
		"prefix": "main(1)",
		"body":[
			"main(int aa, char **args)",
			"{",
			"\tif (aa == 2)",
			"\t\t$0",
			"\telse",
			"\t\tprintf(\"Not enough arguements\\n\");",
			"\treturn (0);",
			"}"
		]
	},

	"NULL_":{
		"prefix": "NULL_CHECK",
		"body": [
			"NULL_CHECK(${1:x});",
			"${2:}"
		]
	},

	"NULL_INT":{
		"prefix": "NULL_CHECK_INT",
		"body": [
			"NULL_CHECK_INT(${1:x});",
			"${2:}"
		]
	},

	"NULL_CHAR":{
		"prefix": "NULL_CHECK_CHAR",
		"body": [
			"NULL_CHECK_CHAR(${1:x});",
			"${2:}"
		]
	},

	"malloc": {
		"prefix": "malloc",
		"body": [
			"malloc(sizeof(${1|*result,*str|}) * (${2:}));",
			"${3:}"
		]
	},

	"calloc": {
		"prefix": "calloc",
		"body": [
			"${name} = calloc(${1|amount,i,size|}, sizeof(*${name});"
		]
	},

	"printf_int":
	{
		"prefix": "printf_int",
		"body": [
			"printf(\"%d\\n\", ${1:int});"
		]
	},

	"printf_char":
	{
		"prefix": "printf_char",
		"body": [
			"printf(\"%d\\n\", ${1:char});"
		]
	},

	"printf_str":
	{
		"prefix": "printf_str",
		"body": [
			"printf(\"%s\\n\", ${1:char *});"
		]
	},

	"include read":
	{
		"prefix": "include_write",
		"body": [
			"#include <sys/types.h>",
			"#include <sys/uio.h>",
			"#include <unistd.h>"
		]
	},

	"include printf":
	{
		"prefix": "include_printf",
		"body": [
			"#include <stdio.h>"
		]
	},

	"include NULL":
	{
		"prefix": "include_null",
		"body": [
			"#include <stddef.h>"
		]
	},

	"include string":
	{
		"prefix": "include_string",
		"body": [
			"#include <string.h>"
		]
	},

	"include limit":
	{
		"prefix": "include_limits",
		"body": [
			"#include <limits.h>"
		]
	},

	"include stdlib":
	{
		"prefix": "include_stdlib",
		"body": [
			"#include <stdlib.h>"
		]
	},

	"include stdbool":
	{
		"prefix": "include_stdbool",
		"body": [
			"#include <stdbool.h>"
		]
	},

	"include math":
	{
		"prefix": "include_math",
		"body": [
			"#include <math.h>"
		]
	},

	"header ifndef":
	{
		"prefix": "#ifndef",
		"body": [
			"#ifndef ${1:file}_H",
			"# define ${1:file}_H",
			"",
			"#endif"
		]
	},

	"Struct typedef":
	{
		"prefix": "typedef struct",
		"body": [
			"typedef struct\ts_${1:name}",
			"{",
			"",
			"}\t\t\t\tt_${1:name};"
		]
	},


	"Advent of Code":
	{
		"prefix": "aoc.h",
		"body": [
			"#include \"../aoc++.h\"",
			""
		]
	},

	"main_aoc":
	{
		"prefix": "main AoC",
		"body":[
			"main(void)",
			"{",
			"\tchar\t*str_file;",
			"",
			"\tstr_file = extract_file(\"input.txt\");",
			"\t$1",
			"\treturn (0);",
			"}\n"
		]
	},

	"AoC":
	{
		"prefix": "AoC",
		"body": [
			"#include \"../aoc++.h\"",
			"",
			"int\t\tmain(void)",
			"{",
			"\tchar\t*str_file;",
			"",
			"\tstr_file = extract_file(\"input.txt\");",
			"\t$1",
			"\treturn (0);",
			"}\n"
		]
	},

	"Print":
	{
		"prefix": ["printf"],
		"body": [
			"printf(\"${1|RESULT: %d,INT: %d,STR: %s,CHAR: %c|}\\n\", ${2|i,result,str,str[i]|});"
		]
	},

	"Str Token":
	{
		"prefix": ["s_tok", "str_tok"],
		"body": [
			"${1|s_tok,str_tok,str|} = strtok(${2|NULL,str_file,s_tok,str|}, ${3|\"\\n\",\" \",\",\"|});"
		]
	},

	"While":
	{
		"prefix": "while",
		"body": [
			"while (${1|i < size,str[i] != '\\0',s_tok != NULL|}$2)",
			"{",
			"",
			"\t${3|i++,s_tok = strtok(NULL)|};",
			"}"
		]
	},

	"Char Hash Table":
	{
		"prefix": "hash",
		"body": [
			"char\thash[256] = { 0 };"
		]
	}
}
